{"version":3,"sources":["weather.js","crypto.js","news.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","state","temperature","feels_like","weather","description","icon","city","wind","humidity","time","timezone","navigator","geolocation","getCurrentPosition","position","getWeather","coords","latitude","longitude","then","data","setState","main","temp","name","speed","dt","lat","lon","fetch","process","response","json","unixTimestamp","type","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","getDay","className","src","this","alt","Math","round","formatUnixTimestamp","Component","Crypto","priceUsd","changePercent24Hr","symbol","getCryptoApi","props","cryptoId","id","isChangePositive","isPos","toLocaleString","hour","minute","hour12","num","places","multiplier","pow","isRedOrBlue","getChangeArrow","roundToDecimal","getTime","News","articles","getNews","sources","map","article","index","urlToImage","source","title","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86a30cec.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './weather.css'\r\n\r\nexport default class Weather extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            temperature: '',\r\n            feels_like: '',\r\n            weather: '',\r\n            description: '',\r\n            icon: '',\r\n            city: '',\r\n            wind: '',\r\n            humidity: '',\r\n            time: '',\r\n            timezone: ''\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // check if user's geolocation is available\r\n        if ('geolocation' in navigator) {\r\n            // available\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                this.getWeather(position.coords.latitude, position.coords.longitude).then(data => this.setState({\r\n                    temperature: data.main.temp,\r\n                    feels_like: data.main.feels_like,\r\n                    weather: data.weather[0].main,\r\n                    description: data.weather[0].description,\r\n                    icon: data.weather[0].icon,\r\n                    city: data.name,\r\n                    wind: data.wind.speed,\r\n                    humidity: data.main.humidity,\r\n                    time: data.dt,\r\n                    timezone: data.timezone\r\n                }))\r\n            });\r\n\r\n        } else {\r\n            // not available\r\n        }\r\n\r\n\r\n            \r\n    }\r\n\r\n    getWeather(lat, lon) {\r\n        return fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\r\n        .then(response => response.json());\r\n    }\r\n\r\n    formatUnixTimestamp(unixTimestamp, type) {\r\n        var date = new Date(unixTimestamp * 1000);\r\n        // TODO: Add metric/imperial toggles\r\n        if (type === 'time') {\r\n\r\n            var hours = date.getHours();\r\n            var minutes = \"0\" + date.getMinutes();\r\n            var seconds = \"0\" + date.getSeconds();\r\n\r\n            // Military time (metric)\r\n            return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n        } else if (type === 'date') {\r\n            // const months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n            const days = ['Sunday', 'Monday', 'Tuesday', 'Wendsday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n            // var dayOfMonth = date.getDate();\r\n            var day = date.getDay();\r\n            // var month = date.getMonth();\r\n\r\n            return days[day]; \r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Weather, container'>\r\n                <div className='inner'>\r\n                    <img className='weather-icon' src={`https://openweathermap.org/img/wn/${this.state.icon}@2x.png`} alt={this.state.description}></img>\r\n                    <div className='temperature'>{Math.round(this.state.temperature)}°F</div>\r\n                    <ul className='weather-items'>\r\n                        <li className='weather-information'>Feels like {Math.round(this.state.feels_like)}°F </li>\r\n                        <li>Wind: {this.state.wind} mph</li>\r\n                        <li>Humidity: {this.state.humidity}%</li>\r\n                    </ul>\r\n                    <ul className='city-date-conditions'>\r\n                        <li className='city'>{this.state.city}</li>\r\n                        <li className='date'>{this.formatUnixTimestamp(this.state.time, 'time')} {this.formatUnixTimestamp(this.state.time, 'date')}</li>\r\n                        <li className='condition'>{this.state.weather}</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                \r\n\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { MdKeyboardArrowUp, MdKeyboardArrowDown } from 'react-icons/md';\r\nimport './crypto.css';\r\n\r\nexport default class Crypto extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            priceUsd: '',\r\n            changePercent24Hr: '',\r\n            symbol: '',\r\n            name: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCryptoApi(this.props.cryptoId).then(data => this.setState({\r\n            priceUsd: data.data.priceUsd,\r\n            changePercent24Hr: data.data.changePercent24Hr,\r\n            symbol: data.data.symbol,\r\n            name: data.data.name\r\n        }))\r\n    }\r\n\r\n    getCryptoApi(id) {\r\n        return fetch(`https://api.coincap.io/v2/assets/${id}`).then(response =>\r\n        response.json());\r\n    }\r\n\r\n    getChangeArrow(changePercent24Hr) {\r\n        if(this.isChangePositive(changePercent24Hr)) {\r\n            return <MdKeyboardArrowUp />;\r\n        } else {\r\n            return <MdKeyboardArrowDown />;\r\n        }\r\n    }\r\n\r\n    isChangePositive(changePercent24Hr) {\r\n        if (changePercent24Hr > 0) {\r\n            return true;\r\n        } else if (changePercent24Hr < 0) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isRedOrBlue(isPos) {\r\n        if (isPos) {\r\n            return 'green';\r\n        } else {\r\n            return 'red';\r\n        }\r\n    }\r\n\r\n    getTime() {\r\n        var time = new Date();\r\n        return time.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n    }\r\n\r\n    roundToDecimal(num, places) {\r\n        var multiplier = Math.pow(10, places);\r\n        return Math.round(num * multiplier) / multiplier;\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className='Crypto'>\r\n                <div className='flex-inline'>\r\n                    <div className={`symbol ${this.isRedOrBlue(this.isChangePositive(this.state.changePercent24Hr))}`}>{this.getChangeArrow(this.state.changePercent24Hr)}</div>\r\n                    <div className='coin'>{this.state.symbol}/USD</div>\r\n                </div>\r\n\r\n                <div className='container'>\r\n                    \r\n                    <div className={`hr-change ${this.isRedOrBlue(this.isChangePositive(this.state.changePercent24Hr))}`}>{this.roundToDecimal(this.state.changePercent24Hr, 2)}%</div>\r\n                    <div className='price'>${this.roundToDecimal(this.state.priceUsd, 2)}</div>\r\n                    <div className='time'>{this.getTime()}</div>\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import {Component} from 'react';\r\nimport './news.css';\r\n\r\nexport default class News extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            articles: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getNews('associated-press, rt, reuters, crypto-coins-news').then(data => this.setState({\r\n            articles: data.articles\r\n        }))\r\n    }\r\n\r\n    getNews(sources) {\r\n        return fetch(`https://newsapi.org/v2/top-headlines?sources=${sources}&pageSize=5&apiKey=${process.env.REACT_APP_NEWS_API_KEY}`).then(response => response.json()); \r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className='News container-f'>\r\n                {this.state.articles.map((article, index) => {\r\n                    return (\r\n                        <div className='article-container' key={index}>\r\n                            <img className='img-article' src={article.urlToImage} alt=''></img>\r\n                            <div className='article-info'>\r\n                                <div className='source'>{article.source.name}</div>\r\n                                <div className='title-article'>{article.title}</div>\r\n                                <div className='description-article'>{article.description}</div>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    )\r\n                })}\r\n               \r\n                            \r\n                       \r\n            </div>\r\n        );\r\n    }\r\n        \r\n}","import Weather from './weather.js';\nimport Crypto from './crypto.js';\nimport News from './news.js'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className='parent'>\n      <div className='flex-parent'>\n        <div className='header-container'>\n          <Weather className='weather-main' />\n          <Crypto className='crypto-main' cryptoId='ethereum'/>\n        </div>\n        <News />\n      </div>\n      \n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}